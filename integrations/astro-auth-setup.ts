import type { AstroIntegration } from "astro";
import { fileURLToPath } from "node:url";
import { writeFileSync, existsSync, mkdirSync } from "node:fs";
import { join, dirname } from "node:path";
import crypto from "node:crypto";

interface AstroAuthSetupOptions {
	production?: boolean;
}

function genSecKey(length = 32): string {
	return crypto.randomBytes(length).toString("hex");
}
function genSecPass(length = 16): string {
	const CHARSET = {
		lowercase: "abcdefghijklmnopqrstuvwxyz",
		uppercase: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
		numbers: "0123456789",
	};

	const allowedChars = Object.values(CHARSET).join("");

	return Array.from(
		{ length },
		() => allowedChars[crypto.randomInt(allowedChars.length)],
	).join("");
}

export default function authSetup(
	options: AstroAuthSetupOptions = {},
): AstroIntegration {
	let envPath: string;

	return {
		name: "astro-auth-setup",
		hooks: {
			"astro:config:setup": async ({ command, updateConfig, config }) => {
				const root = fileURLToPath(config.root);
				envPath = join(root, command === "build" ? ".env.production" : ".env");

				const jwtSecret = genSecKey();
				const apiToken = genSecKey();
				const adminPass = genSecPass();

				const envContent = [
					"# Generated by astro-auth-setup",
					`JWT_SECRET="${jwtSecret}"`,
					`API_TOKEN="${apiToken}"`,
					`ADMIN_PASSWORD="${adminPass}"`,
				].join("\n");

				const envDir = dirname(envPath);
				if (!existsSync(envDir)) {
					mkdirSync(envDir, { recursive: true });
				}

				writeFileSync(envPath, envContent);

				if (command === "build" || !options.production) {
					console.log("\n\x1b[34m====================================\x1b[0m");
					console.log("\x1b[32müîê Generated credentials:\x1b[0m");
					console.log("\x1b[34m====================================\x1b[0m");
					console.log("\x1b[33mPassword:\x1b[0m", adminPass);
					console.log("\x1b[33mJWT Secret:\x1b[0m", jwtSecret);
					console.log("\x1b[33mAPI Token:\x1b[0m", apiToken);
					console.log("\x1b[34m====================================\x1b[0m");
					console.log(
						"\x1b[31m‚ö†Ô∏è  Store this information in a safe place\x1b[0m",
					);
					console.log(
						"\x1b[36mCredentials have been saved to:\x1b[0m",
						envPath,
					);
					console.log("\x1b[34m====================================\x1b[0m\n");
				}
			},
		},
	};
}
